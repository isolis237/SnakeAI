# snake/core/interfaces.py
from __future__ import annotations
from dataclasses import dataclass
from typing import Tuple, Dict, Any, Protocol
import numpy as np

@dataclass(frozen=True)
class Snapshot:
    snake: Tuple[Tuple[int,int], ...]   # head first
    food: Tuple[int,int]
    dir: Tuple[int,int]
    score: int
    steps_since_food: int
    step_count: int
    terminated: bool
    reason: str | None
    grid_w: int
    grid_h: int

class SnapshotSink(Protocol):
    def start(self, grid_w: int, grid_h: int) -> None: ...
    def push(self, snap: Snapshot) -> None: ...
    def close(self) -> None: ...

@dataclass(frozen=True)
class StepResult:
    obs: np.ndarray
    reward: float
    terminated: bool
    truncated: bool
    info: Dict[str, Any]  # should include {"snapshot": Snapshot, "score": int, "reason": str|None}

@dataclass(frozen=True)
class Transition:
    obs: np.ndarray
    action: int
    reward: float
    next_obs: np.ndarray
    terminated: bool
    truncated: bool
    info: Dict[str, Any]

class ReplayBuffer(Protocol):
    def __len__(self) -> int: ...
    def capacity(self) -> int: ...
    def add(self, t: Transition) -> None: ...
    def sample(self, batch_size: int) -> Tuple[Transition, ...]: ...
    def get_state(self) -> Dict[str, Any]: ...
    def set_state(self, state: Dict[str, Any]) -> None: ...

class Env(Protocol):
    def reset(self, *, seed: int | None = None) -> np.ndarray: ...
    def step(self, action: int) -> StepResult: ...
    def action_space_n(self) -> int: ...
    def observation_shape(self) -> Tuple[int, ...]: ...
    def get_snapshot(self) -> Snapshot: ...

class QNetwork(Protocol):
    """Maps observations -> Q-values for each discrete action."""
    def obs_shape(self) -> Tuple[int, ...]: ...
    def num_actions(self) -> int: ...
    def parameters(self) -> Any: ...
    def eval(self) -> None: ...
    def train(self) -> None: ...
    def q_values(self, obs_batch: np.ndarray) -> np.ndarray: ...
    def hard_update_from(self, other: "QNetwork") -> None: ...
    def soft_update_from(self, other: "QNetwork", tau: float) -> None: ...
    def save_weights(self, path: str) -> None: ...
    def load_weights(self, path: str) -> None: ...


class Policy(Protocol):
    def act(self, obs: np.ndarray) -> int: ...
    def act_batch(self, obs_batch: np.ndarray) -> np.ndarray: ...

class Renderer(Protocol):
    def open(self, grid_w: int, grid_h: int, cfg: RenderConfig) -> None: ...
    def draw(self, snap: Snapshot) -> None: ...
    def tick(self, fps: int) -> None: ...
    def close(self) -> None: ...
    def save_frame(self, snap: Snapshot) -> None: ...